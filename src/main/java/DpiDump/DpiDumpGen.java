package DpiDump;
import java.util.LinkedList;
import java.util.List;

import Common.Config;
import Common.CsvDumper;
import Common.CsvLoader;
import Common.RandUtils;
import Common.RandomCollection;
import Common.RandomImsi;

/*
 * This Java source file was generated by the Gradle 'init' task.
 */
public class DpiDumpGen {
		
	public int gen(String appFilePath, 
			String appProtoFilePath, 
			String ipProtoFilePath,
			String mccMncFilePath) {
		RandomCollection<String> mapApp = CsvLoader.load(appFilePath);
		RandomCollection<String> mapAppProto = CsvLoader.load(appProtoFilePath);
		//RandomCollection<String> mapIpProto = CsvLoader.load(ipProtoFilePath);
		RandomCollection<String> mapMccMnc = CsvLoader.load(mccMncFilePath);
		RandomImsi<String> mapImsi = new RandomImsi<String>(mapMccMnc, Config.USERS_PER_MNC);
		RandomImsi<String> mapImei = new RandomImsi<String>(mapMccMnc, Config.USERS_PER_MNC);
		
		List<Record> list = new LinkedList<Record>();
		for (int i = 0 ; i < 10000; i++) {
			Record rec = new Record();
			
			       
			rec.setNwApn(RandUtils.nextDomainName(RandUtils.nextInt(2,4)));
			rec.setNwChargingCharacteristics(RandUtils.nextIntString(12));
			rec.setNwRatType(RandUtils.nextRat());
			rec.setNwCi(RandUtils.nextIntString(2));
			rec.setNwEci(RandUtils.nextIntString(3));
			rec.setNwLac(RandUtils.nextIntString(3));
			rec.setNwSac(RandUtils.nextIntString(3));
			rec.setNwRac(RandUtils.nextIntString(3));
			rec.setNwTac(RandUtils.nextIntString(5));
			
			rec.setAppName(mapApp.next());
			rec.setAppProto(mapAppProto.next());
			String mccMnc = mapMccMnc.next();
			rec.setNwMccMnc(mccMnc);
			rec.setUserImsi(mapImsi.next(mccMnc));
			rec.setUserImei(mapImei.next(mccMnc));
			
			rec.setDestinationIpAddress(RandUtils.nextIpv4());
			rec.setDestinationPort(RandUtils.nextInt(0,65535));
			
			rec.setTimeStamp(RandUtils.nextTimestamp());
			int duration = RandUtils.nextExp(15*1000, 0, 1*60*60*1000);
			rec.setDuration(duration);
			
			int tput = RandUtils.nextNormal(300.0*1000, 100.0*1000, 10.0*1000, 12000.0*1000); // byte per second
			int bytes = tput*duration/1000;
			rec.setDownlinkBytes(bytes);
			rec.setDownlinkPkt(bytes/512);
			bytes /= RandUtils.nextInt(21,25)/10; // dl/ul ratio is about 2.3
			rec.setUplinkBytes(bytes);
			rec.setUplinkPkt(bytes/256);
			
			rec.setIsTetheringDetected(RandUtils.nextBoolean()?"true":"false");
			
			rec.setUrl(RandUtils.nextUrl());
			
			//System.out.println(str);
			list.add(rec);
		}
		
		try {
			CsvDumper dumper = new CsvDumper();
			dumper.dump(list, "./dpi-dump.csv");
		} catch (Exception e) {
			e.printStackTrace();
		}
        return 0;
    }
}
